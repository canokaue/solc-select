#!/usr/bin/env python3
import argparse
import json
import os
import re
import urllib.request

home_dir = os.path.expanduser('~')
solc_select_dir = f"{home_dir}/.solc-select"
artifacts_dir = f"{solc_select_dir}/artifacts"


# all versions take 1.5G
# $ du -sh ~/.solc-select/artifacts/
# 1.5G    /Users/artur/.solc-select/artifacts/
# versions can be empty - install all versions
def download_all(versions):
    releases = get_available_versions()

    [print("Invalid version format" + version) for version in versions if not valid_version(version)]

    for version, artifact in releases.items():
        if versions and version not in versions:
            continue

        url = f"https://binaries.soliditylang.org/macosx-amd64/{artifact}"
        print("Installed", version)
        artifact_file = f"{artifacts_dir}/solc-{version}"
        urllib.request.urlretrieve(url, artifact_file)
        os.chmod(artifact_file, 0o775)  # TODO rethink permissions


def switch_global_version(version):
    if version in get_installed_versions():
        with open(f"{solc_select_dir}/global-version", "w") as f:
            f.write(version)
        print("Switched global version to", version)
    elif version in get_available_versions():
        raise argparse.ArgumentTypeError("You need to install " + version + " prior to using it. Use `solc-select "
                                                                            "install " + version + "`")
    else:
        print("unknown version")


def valid_version(version):
    # check that it matches <digit>.<digit>.<digit>
    match = re.search("^(\d+).(\d+).(\d+)$", version)
    if match is None:
        raise argparse.ArgumentTypeError(f"Invalid Solidity version {version}. expecting something like `0.4.25`")
    versions_available_for_download = sorted(get_available_versions().keys())
    min_version = versions_available_for_download[0]
    max_version = versions_available_for_download[-1]
    if available_versions:
        if is_out_of_bounds(version, min_version):
            raise argparse.ArgumentTypeError(f"Solidity version {version} too low. Earliest version available is {min_version}")
        elif is_out_of_bounds(max_version, version):
            raise argparse.ArgumentTypeError(f"Solidity version {version} too high. Highest version available is {max_version}")

    return version


def is_out_of_bounds(version1, version2):
    int_v1 = int(version1.replace(".", ""))
    int_v2 = int(version2.replace(".", ""))
    return int_v1 < int_v2


# TODO: figure out how whether these can be optimized
def installed_versions():
    releases = get_installed_versions()
    print("Installed versions: ")
    [print(version) for version in sorted(releases.keys())]


def get_installed_versions():
    all_installed_versions = os.listdir(artifacts_dir)
    all_installed_versions.sort()
    return [f.replace('solc-', '') for f in all_installed_versions]


def get_available_versions():
    list_json = urllib.request.urlopen('https://binaries.soliditylang.org/macosx-amd64/list.json').read()
    releases = json.loads(list_json)["releases"]
    return releases


def available_versions():
    all_installed_versions = get_available_versions()
    print("Available versions: ")
    [print(version) for version in all_installed_versions]


INSTALL_VERSIONS = "INSTALL_VERSIONS"
USE_VERSION = "USE_VERSION"
INSTALLED_VERSIONS = "INSTALLED_VERSIONS"
AVAILABLE_VERSIONS = "AVAILABLE_VERSIONS"

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='Allows users to quickly switch between Solidity compiler versions')
parser_install = subparsers.add_parser('install',
                                       help='install specific version or install all available solc versions')
parser_install.add_argument(INSTALL_VERSIONS, help='specific version you want to install (0.4.25) or empty (specify '
                                                   'nothing)', nargs="*", default=list(), type=valid_version)
parser_use = subparsers.add_parser('use', help='change the version of global solc compiler')
parser_use.add_argument(USE_VERSION, help='solc version you want to use (eg: 0.4.25)', type=valid_version)
parser_use = subparsers.add_parser('installed-versions', help='prints out all locally available solc versions')
parser_use.add_argument(INSTALLED_VERSIONS, help='', nargs="*", default=list())
parser_use = subparsers.add_parser('available-versions', help='prints out all solc versions available for download')
parser_use.add_argument(AVAILABLE_VERSIONS, help='', nargs="*", default=list())
parser.parse_args()

args = vars(parser.parse_args())
print(args)

if args.get(INSTALL_VERSIONS) is not None:
    download_all(args.get(INSTALL_VERSIONS))

if args.get(USE_VERSION) is not None:
    switch_global_version(args.get(USE_VERSION))

if args.get(INSTALLED_VERSIONS) is not None:
    installed_versions()

if args.get(AVAILABLE_VERSIONS) is not None:
    available_versions()
